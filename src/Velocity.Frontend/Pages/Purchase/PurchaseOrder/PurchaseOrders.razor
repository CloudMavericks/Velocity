@page "/purchase-orders"
@using Velocity.Frontend.Services.HttpClients
@using Velocity.Shared.Enums
@using Velocity.Shared.Responses.PurchaseOrders
@inject PurchaseOrderHttpClient PurchaseOrderHttpClient

<MudOverlay @bind-Visible="_isLoading" DarkBackground="AppThemeService.IsDarkMode" LightBackground="@(!AppThemeService.IsDarkMode)" Absolute>
    <MudStack AlignItems="AlignItems.Center">
        <MudProgressCircular Color="Color.Secondary" Indeterminate/>
        <MudText>@_loadingMessage</MudText>
    </MudStack>
</MudOverlay>

<MudStack AlignItems="AlignItems.Center" Spacing="0">
    <MudText Typo="Typo.h5" Color="Color.Primary">Purchase Orders</MudText>
    <MudText Typo="Typo.body2">Manage all your purchase orders here.</MudText>
</MudStack>

<MudPaper Outlined Class="my-4">
    <MudStack Row Class="px-3 py-2" AlignItems="AlignItems.Center">
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudTooltip Text="New Purchase Order">
                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Add"
                               Href="/purchase-orders/new" />
            </MudTooltip>
            <MudTooltip Text="Reload">
                <MudIconButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => OnSearch(_searchQuery))"
                               Icon="@Icons.Material.Filled.Refresh"/>
            </MudTooltip>
            <MudTextField T="@string" ValueChanged="@(OnSearch)" DebounceInterval="300" Placeholder="Search for Purchase Orders"
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"
                          Variant="Variant.Outlined" Margin="Margin.Dense"/>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudStack AlignItems="AlignItems.Center">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                           IconColor="Color.Surface" Href="/purchase-orders/new">New Purchase Order</MudButton>
            </MudStack>
            <MudStack AlignItems="AlignItems.Center">
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => OnSearch(_searchQuery))"
                           StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface">Reload</MudButton>
            </MudStack>
            <MudStack AlignItems="AlignItems.Center" Class="flex-grow-1"></MudStack>
            <MudStack AlignItems="AlignItems.Center" Class="flex-grow-1 ms-auto me-0">
                <MudTextField T="@string" ValueChanged="@(OnSearch)" DebounceInterval="300" Placeholder="Search for Purchase Orders"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                              Variant="Variant.Outlined" Margin="Margin.Dense" FullWidth/>
            </MudStack>
        </MudHidden>
    </MudStack>
    <MudDivider DividerType="DividerType.FullWidth"/>
    <MudTable Dense Hover Breakpoint="Breakpoint.None" HorizontalScrollbar LoadingProgressColor="Color.Secondary" Elevation="0"
              @ref="@_mudTable" ServerData="OnServerReloadAsync" OnRowClick="OnRowClick" T="PurchaseOrderResponse" Style="white-space: nowrap">
        <NoRecordsContent>
            <MudAlert Class="my-n3" Severity="Severity.Normal">No purchase orders found.</MudAlert>
        </NoRecordsContent>
        <LoadingContent>
            <MudText Typo="Typo.body1" Align="Align.Center" GutterBottom="true">Loading...</MudText>
        </LoadingContent>
        <HeaderContent>
            <MudTh>Order Number</MudTh>
            <MudTh>Order Date</MudTh>
            <MudTh>Supplier Reference Number</MudTh>
            <MudTh>Supplier</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Total</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate Context="purchaseOrder">
            <MudTd DataLabel="Order Number"><MudHighlighter HighlightedText="@_searchQuery" Text="@purchaseOrder.OrderNumber"/></MudTd>
            <MudTd DataLabel="Order Date"><MudHighlighter HighlightedText="@_searchQuery" Text="@purchaseOrder.OrderDate.ToString("dd/MM/yyyy")"/></MudTd>
            <MudTd DataLabel="Supplier Reference Number"><MudHighlighter HighlightedText="@_searchQuery" Text="@purchaseOrder.SupplierReferenceNumber"/></MudTd>
            <MudTd DataLabel="Supplier"><MudHighlighter HighlightedText="@_searchQuery" Text="@purchaseOrder.SupplierName"/></MudTd>
            <MudTd DataLabel="Status">
                @switch (purchaseOrder.Status)
                {
                    case PurchaseOrderStatus.Placed:
                        <MudChip Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Class="my-n2" Text="Placed"/>
                        break;
                    case PurchaseOrderStatus.Completed:
                        <MudChip Size="Size.Small" Variant="Variant.Filled" Color="Color.Success" Class="my-n2" Text="Completed"/>
                        break;
                    case PurchaseOrderStatus.Cancelled:
                        <MudChip Size="Size.Small" Variant="Variant.Filled" Color="Color.Error" Class="my-n2" Text="Cancelled"/>
                        break;
                    default:
                        <MudChip Size="Size.Small" Variant="Variant.Filled" Color="Color.Info" Class="my-n2" Text="Unknown"/>
                        break;
                }
            </MudTd>
            <MudTd DataLabel="Total Amt."><MudHighlighter HighlightedText="@_searchQuery" Text="@purchaseOrder.Total.ToString("C")"/></MudTd>
            <MudTd>
                <MudStack Row>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Print" Color="Color.Success"
                               Size="Size.Small" OnClick="@(() => PrintAsync(purchaseOrder.Id))">Print</MudButton>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Warning"
                               Size="Size.Small" Href="@($"/purchase-orders/{purchaseOrder.Id}/edit")"
                               Disabled="@(purchaseOrder.Status != PurchaseOrderStatus.Placed)">Edit</MudButton>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error"
                               Size="Size.Small" OnClick="@(() => DeleteAsync(purchaseOrder.Id))"
                               Disabled="@(purchaseOrder.Status != PurchaseOrderStatus.Placed)">Delete</MudButton>
                    <MudMenu TransformOrigin="Origin.TopRight" AnchorOrigin="Origin.BottomRight" Dense Class="d-flex align-center">
                        <ActivatorContent>
                            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.KeyboardArrowDown"
                                       Size="Size.Small" Disabled="@(purchaseOrder.Status != PurchaseOrderStatus.Placed)">
                                More Options
                            </MudButton>
                        </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem Icon="@Icons.Material.Filled.LibraryAdd" 
                                         OnClick="@(() => CreateNewInvoice(purchaseOrder.Id))"
                                         OnTouch="@(() => CreateNewInvoice(purchaseOrder.Id))">
                                New Invoice
                            </MudMenuItem>
                            <MudMenuItem Icon="@Icons.Material.Filled.Check" 
                                         OnClick="@(() => CompleteOrder(purchaseOrder.Id))"
                                         OnTouch="@(() => CompleteOrder(purchaseOrder.Id))">
                                Mark as Completed
                            </MudMenuItem>
                            <MudMenuItem Icon="@Icons.Material.Filled.Cancel" 
                                         OnClick="@(() => CancelOrder(purchaseOrder.Id))"
                                         OnTouch="@(() => CancelOrder(purchaseOrder.Id))">
                                Cancel Order
                            </MudMenuItem>
                        </ChildContent>
                    </MudMenu>
                </MudStack>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
</MudPaper>

@code {
    
    private IList<PurchaseOrderResponse> _purchaseOrders = new List<PurchaseOrderResponse>();
    private MudTable<PurchaseOrderResponse> _mudTable;
    private long _totalItems;
    private string _searchQuery = string.Empty;

    private bool _isLoading;
    private string _loadingMessage;

    private async Task<TableData<PurchaseOrderResponse>> OnServerReloadAsync(TableState tableState)
    {
        if (!string.IsNullOrWhiteSpace(_searchQuery))
        {
            tableState.Page = 0;
        }
        await LoadDataAsync(tableState.Page, tableState.PageSize);
        return new TableData<PurchaseOrderResponse> { TotalItems = (int)_totalItems, Items = _purchaseOrders };
    }

    private async Task LoadDataAsync(int page, int pageSize)
    {
        try
        {
            var response = await PurchaseOrderHttpClient.GetAllAsync(page + 1, pageSize, _searchQuery);
            if (response.Succeeded)
            {
                _totalItems = response.TotalCount;
                _purchaseOrders = response.Data;
            }
            else
            {
                foreach (var message in response.Messages)
                {
                    Snackbar.Add(message, Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Something went wrong. Please try again." + ex.Message, Severity.Error); 
        }
    }

    private Task OnSearch(string text)
    {
        _searchQuery = text;
        return _mudTable.ReloadServerData();
    }

    private void CreateNewInvoice(Guid id)
    {
        NavigationManager.NavigateTo($"/purchase-invoices/new?orderId={id}");
    }
    
    private async Task CompleteOrder(Guid id)
    {
        if (await DialogService.ShowMessageBox("Mark Order as Completed", "Are you sure you want to mark this order as completed?", yesText: "Mark as Completed", cancelText: "Cancel") == true)
        {
            try
            {
                await PurchaseOrderHttpClient.CompleteAsync(id);
            }
            catch (Exception)
            {
                Snackbar.Add("Something went wrong. Please try again.", Severity.Error);
            }
        }
    }
    
    private async Task CancelOrder(Guid id)
    {
        if (await DialogService.ShowMessageBox("Cancel Order", "Are you sure you want to cancel this order?", yesText: "Cancel Order", cancelText: "Cancel") == true)
        {
            try
            {
                await PurchaseOrderHttpClient.CancelAsync(id);
            }
            catch (Exception)
            {
                Snackbar.Add("Something went wrong. Please try again.", Severity.Error);
            }
        }
    }

    private void OnRowClick(TableRowClickEventArgs<PurchaseOrderResponse> args)
    {
        NavigationManager.NavigateTo($"/purchase-orders/{args.Item.Id}/details");
    }

    private async Task DeleteAsync(Guid id)
    {
        if(await DialogService.ShowDeleteDialog("Delete Purchase Order", "Are you sure you want to delete this purchase order?", yesText: "Delete", cancelText: "Cancel"))
        {
            try
            {
                await PurchaseOrderHttpClient.DeleteAsync(id);
                Snackbar.Add("Purchase Order deleted successfully.", Severity.Success);
                await _mudTable.ReloadServerData();
            }
            catch (HttpRequestException e)
            {
                Snackbar.Add(e.Message, Severity.Error);
            }
            catch (Exception)
            {
                Snackbar.Add("Something went wrong. Please try again.", Severity.Error);
            }
        }
    }

    private async Task PrintAsync(Guid id)
    {
        try
        {
            _isLoading = true;
            _loadingMessage = "Generating PDF...";
            var bytes = await PurchaseOrderHttpClient.PrintAsync(id);
            var folderPath = System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "Velocity");
            if (!System.IO.Directory.Exists(folderPath))
            {
                System.IO.Directory.CreateDirectory(folderPath);
            }   
            var fileName = System.IO.Path.Combine(folderPath, "PurchaseOrder.pdf");
            var fileStream = System.IO.File.Create(fileName);
            fileStream.Write(bytes, 0, bytes.Length);
            fileStream.Close();
            var process = new System.Diagnostics.Process();
            process.StartInfo.FileName = fileName;
            process.StartInfo.UseShellExecute = true;
            System.Diagnostics.Process.Start(process.StartInfo);
            Snackbar.Add("PDF generated successfully.", Severity.Success);
        }
        catch (HttpRequestException e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        catch (System.IO.IOException e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Something went wrong. Please try again. {e.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }
}