@page "/purchase-invoices/new"
@using Velocity.Frontend.Services.HttpClients
@using Velocity.Shared.Requests.PurchaseInvoices
@using Velocity.Shared.Responses.PurchaseOrders
@using Velocity.Shared.Responses.Suppliers
@inject SupplierHttpClient SupplierHttpClient
@inject PurchaseOrderHttpClient PurchaseOrderHttpClient
@inject PurchaseInvoiceHttpClient PurchaseInvoiceHttpClient

<EditForm Model="Model" OnValidSubmit="SubmitAsync">
    <DataAnnotationsValidator />
    <MudPaper Outlined Class="mb-4">
        <MudStack Row Justify="Justify.SpaceBetween" Class="pa-3">
            <MudStack Class="px-1" Spacing="0">
                @if (OrderId == Guid.Empty)
                {
                    <MudText Typo="Typo.h5" Color="Color.Primary">New Blank Purchase Invoice</MudText>
                    <MudText>Fill in the form below to create a new blank purchase invoice</MudText>
                }
                else
                {
                    <MudText Typo="Typo.h5" Color="Color.Primary">New Purchase Invoice</MudText>
                    <MudText>Fill in the form below to create a new purchase invoice from Order Number: @(Order?.OrderNumber ?? "Loading....")</MudText>
                }
            </MudStack>
            <MudStack Row AlignItems="AlignItems.Center">
                <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Create</MudButton>
                <MudButton Color="Color.Default" StartIcon="@Icons.Material.Filled.Clear" Variant="Variant.Filled" OnClick="@ConfirmCancel">Cancel</MudButton>
            </MudStack>
        </MudStack>
        <MudDivider DividerType="DividerType.FullWidth" />
        <MudGrid Class="pa-4" Spacing="1">
            <MudItem xs="12" sm="6" md="3">
                <MudDatePicker Margin="Margin.Dense" Variant="Variant.Outlined" Label="Purchase Date" DateFormat="dd/MM/yyyy" 
                               Date="@Model.PurchaseDate" DateChanged="@SetPurchaseDate" For="@(() => Model.PurchaseDate)" Editable />
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudTextField Margin="Margin.Dense" Variant="Variant.Outlined" Label="Purchase Number" Disabled
                              @bind-Value="@Model.PurchaseNumber" For="@(() => Model.PurchaseNumber)" />
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudTextField Margin="Margin.Dense" Variant="Variant.Outlined" Label="Invoice Number"
                              @bind-Value="@Model.InvoiceNumber" For="@(() => Model.InvoiceNumber)" />
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudDatePicker Margin="Margin.Dense" Variant="Variant.Outlined" Label="Invoice Date" DateFormat="dd/MM/yyyy" 
                               @bind-Date="@Model.InvoiceDate" For="@(() => Model.InvoiceDate)" Editable />
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudTextField Margin="Margin.Dense" Variant="Variant.Outlined" Label="Reference Order Number" Disabled="@(OrderId != Guid.Empty)"
                           @bind-Value="@Model.ReferenceNumber" For="@(() => Model.ReferenceNumber)" />
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudAutocomplete T="SupplierResponse" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Supplier"
                                 @bind-Value="@Supplier" For="@(() => Supplier)" Dense SelectOnClick SelectValueOnTab
                                 SearchFuncWithCancel="FetchSuppliers" DebounceInterval="500" ResetValueOnEmptyText
                                 ProgressIndicatorColor="Color.Secondary" ShowProgressIndicator="@_isLoadingSupplier">
                    <ItemTemplate Context="supplier">
                        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                            <MudText Typo="Typo.body2">@supplier.Name</MudText>
                            <MudChip Class="my-n2" Size="Size.Small" Color="Color.Primary">@supplier.ContactName</MudChip>
                        </MudStack>
                    </ItemTemplate>
                </MudAutocomplete>
            </MudItem>
        </MudGrid>
        <MudPaper Outlined Class="mx-4 mb-4">
            <MudStack Row Justify="Justify.SpaceBetween" Class="px-3">
                <MudStack Class="py-2" Spacing="0">
                    <MudText Typo="Typo.body1" Color="Color.Primary">Invoice Items</MudText>
                    <MudText Typo="Typo.body2">Add items to the purchase invoice</MudText>
                </MudStack>
                <MudStack Row AlignItems="AlignItems.Center">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                               IconColor="Color.Surface" Size="Size.Small" OnClick="@AddItem">Add Item</MudButton>
                </MudStack>
            </MudStack>
            <MudDivider DividerType="DividerType.FullWidth" />
            <MudTable Items="@Model.Items" Elevation="0" HorizontalScrollbar T="PurchaseInvoiceItemRequest" 
                      Breakpoint="Breakpoint.None" OnRowClick="@((args) => Edit(args.Item))" Dense Hover 
                      Style="white-space: nowrap">
                <NoRecordsContent>
                    <MudAlert Class="my-n3" Severity="Severity.Normal">No items added to the purchase invoice</MudAlert>
                </NoRecordsContent>
                <HeaderContent>
                    <MudTh>Product</MudTh>
                    <MudTh>Quantity</MudTh>
                    <MudTh>Unit Price</MudTh>
                    <MudTh>Discount</MudTh>
                    <MudTh>Tax %</MudTh>
                    <MudTh>Total Amount</MudTh>
                    <MudTh>Unit Selling Price</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate Context="purchaseInvoiceItem">
                    <MudTd DataLabel="Product">@purchaseInvoiceItem.Product</MudTd>
                    <MudTd DataLabel="Quantity">@purchaseInvoiceItem.Quantity</MudTd>
                    <MudTd DataLabel="Unit Price">@purchaseInvoiceItem.UnitPrice.ToString("C")</MudTd>
                    <MudTd DataLabel="Discount">@purchaseInvoiceItem.DiscountAmount.ToString("C")</MudTd>
                    <MudTd DataLabel="Tax %">@purchaseInvoiceItem.TaxPercentage.ToString("0")</MudTd>
                    <MudTd DataLabel="Total Amount">@purchaseInvoiceItem.Total.ToString("C")</MudTd>
                    <MudTd DataLabel="Unit Selling Price">@purchaseInvoiceItem.UnitSellingPrice.ToString("C")</MudTd>
                    <MudTd DataLabel="Actions">
                        <MudStack Row>
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Warning"
                                       Size="Size.Small" OnClick="@(() => Edit(purchaseInvoiceItem))">Edit</MudButton>
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                       Size="Size.Small" OnClick="@(() => Delete(purchaseInvoiceItem))">Delete</MudButton>
                        </MudStack>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudPaper>
</EditForm>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "orderId")]
    public Guid OrderId { get; set; } = Guid.Empty;
    
    private PurchaseOrderResponse Order { get; set; }
    
    private CreatePurchaseInvoiceRequest Model { get; } = new();
    
    private bool _isLoadingSupplier;
    private SupplierResponse Supplier { get; set; }

    protected override Task OnInitializedAsync()
    {
        return Task.WhenAll(SetPurchaseDate(DateTime.Today), LoadOrderDetails());
    }

    private async Task LoadOrderDetails()
    {
        try
        {
            if(OrderId == Guid.Empty)
            {
                return;
            }
            Order = await PurchaseOrderHttpClient.GetAsync(OrderId);
            if (Order == null)
            {
                Snackbar.Add($"Order with Id: {OrderId} not found. The form will be a blank purchase invoice", Severity.Error);
                OrderId = Guid.Empty;
                return;
            }
            Model.ReferenceNumber = Order.OrderNumber;
            Model.InvoiceDate = DateTime.Today;
            Supplier = await SupplierHttpClient.GetAsync(Order.SupplierId);
            Model.Items = Order.Items.Select(x => new PurchaseInvoiceItemRequest
            {
                ProductId = x.ProductId,
                Product = x.Product,
                Quantity = x.Quantity,
                UnitPrice = x.UnitPrice,
                DiscountAmount = x.DiscountAmount,
                TaxPercentage = x.TaxPercentage,
            }).ToList();
        }
        catch (Exception)
        {
            OrderId = Guid.Empty;
            Snackbar.Add("Something went wrong while fetching order details. The form will be a blank purchase invoice", Severity.Error);
        }
    }

    private async Task SetPurchaseDate(DateTime? purchaseDate)
    {
        Model.PurchaseDate = purchaseDate;
        if (purchaseDate.HasValue)
        {
            Model.PurchaseNumber = await PurchaseInvoiceHttpClient.GetNextPurchaseNumberAsync(purchaseDate.Value);
        }
        else
        {
            Model.PurchaseNumber = null;
        }
    }
    
    private async Task<IEnumerable<SupplierResponse>> FetchSuppliers(string value, CancellationToken cancellationToken = default)
    {
        _isLoadingSupplier = true;
        try
        {
            var result = await SupplierHttpClient.GetAllAsync(1, 5, value,cancellationToken);
            if(result.Succeeded)
            {
                return result.Data;
            }
            foreach (var message in result.Messages)
            {
                Snackbar.Add(message, Severity.Error);   
            }
            return null;
        }
        catch (Exception)
        {
            Snackbar.Add("Something went wrong while fetching suppliers", Severity.Error);
            return null;
        }
        finally
        {
            _isLoadingSupplier = false;
        }
    }

    private async Task SubmitAsync()
    {
        try
        {
            Model.SupplierId = Supplier.Id;
            await PurchaseInvoiceHttpClient.CreateAsync(Model);
            Snackbar.Add("Purchase invoice created successfully", Severity.Success);
            NavigationManager.NavigateTo("/purchase-invoices", replace: true);
        }
        catch (Exception)
        {
            Snackbar.Add("Something went wrong. Please try again.", Severity.Error);
        }
    }

    private async Task ConfirmCancel()
    {
        if(await DialogService.ShowMessageBox("Discard new purchase invoice?", "Are you sure want to discard this new purchase invoice?", yesText: "Discard", cancelText: "Cancel") == true)
        {
            NavigationManager.NavigateTo("/purchase-invoices", replace: true);
        }
    }
    
    private async Task AddItem()
    {
        if(Supplier == null)
        {
            Snackbar.Add("Please select a supplier first", Severity.Warning);
            return;
        }
        var dialogOptions = new DialogOptions
        {
            FullWidth = true,
            DisableBackdropClick = true,
        };
        var dialogParameters = new DialogParameters
        {
            { nameof(AddEditPurchaseInvoiceItemDialog.SupplierId), Supplier.Id }
        };
        var dialog = await DialogService.ShowAsync<AddEditPurchaseInvoiceItemDialog>("Add New Invoice Item", dialogParameters, dialogOptions);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            if (result.Data is PurchaseInvoiceItemRequest purchaseInvoiceItem)
            {
                Model.Items.Add(purchaseInvoiceItem);
            }
        }
    }
    
    private async Task Edit(PurchaseInvoiceItemRequest purchaseInvoiceItem)
    {
        if(Supplier == null)
        {
            Snackbar.Add("Please select a supplier first", Severity.Warning);
            return;
        }
        var dialogOptions = new DialogOptions
        {
            FullWidth = true,
            DisableBackdropClick = true,
        };
        var dialogParameters = new DialogParameters
        {
            { nameof(AddEditPurchaseInvoiceItemDialog.Model), purchaseInvoiceItem },
            { nameof(AddEditPurchaseInvoiceItemDialog.SupplierId), Supplier.Id }
        };
        var dialog = await DialogService.ShowAsync<AddEditPurchaseInvoiceItemDialog>("Edit New Invoice Item", dialogParameters, dialogOptions);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            if (result.Data is PurchaseInvoiceItemRequest item)
            {
                var index = Model.Items.IndexOf(purchaseInvoiceItem);
                Model.Items[index] = item;
            }
        }
    }

    private void Delete(PurchaseInvoiceItemRequest purchaseInvoiceItem)
    {
        Model.Items.Remove(purchaseInvoiceItem);
    }
}