@using Velocity.Shared.Responses.PurchaseOrders
@using Velocity.Frontend.Services.HttpClients
@using Velocity.Shared.Enums
@using Velocity.Shared.Requests.PurchaseOrders
@inject PurchaseOrderHttpClient PurchaseOrderHttpClient

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Search" Class="me-3 mb-n1 ms-n1"/>Select Purchase Order for Invoice</MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid Spacing="1" Class="my-n2">
            <MudItem xs="12">
                <MudAutocomplete T="PurchaseOrderResponse" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Purchase Order"
                                 @bind-Value="@PurchaseOrder" For="@(() => PurchaseOrder)" Dense SelectOnClick SelectValueOnTab
                                 SearchFuncWithCancel="FetchPurchaseOrders" DebounceInterval="500" ResetValueOnEmptyText
                                 ProgressIndicatorColor="Color.Secondary" ShowProgressIndicator="@_isLoadingPurchaseOrder"
                                 ToStringFunc="@((x) => $"{x.OrderNumber} - {x.OrderDate:dd/MM/yyyy}")">
                    <ItemTemplate Context="purchaseOrder">
                        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                            <MudText Typo="Typo.body2">@purchaseOrder.OrderNumber</MudText>
                            <MudChip Class="my-n2" Size="Size.Small" Color="Color.Primary">@purchaseOrder.OrderDate.ToString("dd/MM/yyyy")</MudChip>
                        </MudStack>
                    </ItemTemplate>
                </MudAutocomplete>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AutoAwesome" DisableElevation 
                   Color="Color.Tertiary" Href="/purchase-invoices/new" Class="me-auto">Use Blank</MudButton>
        <MudButton Variant="Variant.Filled" DisableElevation Color="Color.Primary" OnClick="@Submit">Select</MudButton>
        <MudButton Variant="Variant.Filled" DisableElevation OnClick="@(() => MudDialog.Cancel())">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    
    private bool _isLoadingPurchaseOrder;
    private PurchaseOrderResponse PurchaseOrder { get; set; }
    
    private async Task<IEnumerable<PurchaseOrderResponse>> FetchPurchaseOrders(string value, CancellationToken cancellationToken = default)
    {
        _isLoadingPurchaseOrder = true;
        try
        {
            var result = await PurchaseOrderHttpClient.GetAllAsync(new GetPurchaseOrdersRequest()
            {
                PageNumber = 1,
                PageSize = 5,
                SearchString = value,
                Status = PurchaseOrderStatus.Placed
            }, cancellationToken);
            if(result.Succeeded)
            {
                return result.Data;
            }
            foreach (var message in result.Messages)
            {
                Snackbar.Add(message, Severity.Error);   
            }
            return null;
        }
        catch (Exception)
        {
            Snackbar.Add("Something went wrong while fetching suppliers", Severity.Error);
            return null;
        }
        finally
        {
            _isLoadingPurchaseOrder = false;
        }
    }

    private void Submit()
    {
        if(PurchaseOrder == null)
        {
            Snackbar.Add("Please select a purchase order", Severity.Error);
            return;
        }
        NavigationManager.NavigateTo($"/purchase-invoices/new?orderId={PurchaseOrder.Id}");
    }
}